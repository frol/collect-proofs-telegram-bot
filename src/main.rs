use teloxide::{
    dispatching2::dialogue::{serializer::Json, RedisStorage, Storage},
    macros::DialogueState,
    payloads::SendMessageSetters,
    prelude2::*,
    types::Me,
    utils::command::BotCommand,
    RequestError,
};
use thiserror::Error;

type MyDialogue = Dialogue<State, RedisStorage<Json>>;
type StorageError = <RedisStorage<Json> as Storage<State>>::Error;

const FORWARD_REPORTS_TO_CHAT_ID: i64 = -1001648966128;

const HELP_TEXT: &str = r#"–ú–∏—Ä—É –Ω–∞–º –≤—Å—ñ–º!

–ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–æ –•–∞—Ä–∫—ñ–≤—Å—å–∫–∏–º –Ü–¢ —Å—É—Å–ø—ñ–ª—Å—å—Ç–≤–æ–º —Ä–∞–∑–æ–º —ñ–∑ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏ –∑–∞–¥–ª—è –∑–±–æ—Ä—É –º–µ–¥—ñ–∞ —Ä—É–π–Ω—É–≤–∞–Ω—å –•–∞—Ä–∫–æ–≤—É. –¶—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è  –∑–∞–¥–ª—è –¥–æ–Ω–µ—Å–µ–Ω–Ω—è –¥–æ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É —Ç–∞ –†–æ—Å—ñ–π—Å—å–∫–∏—Ö –≥—Ä–æ–º–∞–¥—è–Ω, —è–∫ –†–æ—Å—ñ—è –∑–Ω–∏—â—É—î –•–∞—Ä–∫—ñ–≤.

–ù–∞—Ä–∞–∑—ñ –±–æ—Ç –º–∞—î –ª–∏—à–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É:
/add - –î–æ–¥–∞—Ç–∏ –¥–æ–∫–∞–∑–∏ (–≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó) üì∑"#;

#[derive(Debug, Error)]
enum Error {
    #[error("error from Telegram: {0}")]
    TelegramError(#[from] RequestError),

    #[error("error from storage: {0}")]
    StorageError(#[from] StorageError),
}

#[derive(DialogueState, Debug, Clone, serde::Serialize, serde::Deserialize)]
#[handler_out(anyhow::Result<()>)]
pub enum State {
    #[handler(handle_start)]
    Start,

    #[handler(handle_ready_to_receive_media)]
    ReadyToReceiveMedia { contact: teloxide::types::Contact },

    #[handler(handle_ready_to_receive_comment)]
    ReadyToReceiveComment {
        contact: teloxide::types::Contact,
        media_msg_ids: Vec<i32>,
    },

    #[handler(handle_awaiting_confirmation)]
    AwaitingConfirmation {
        contact: teloxide::types::Contact,
        media_msg_ids: Vec<i32>,
        comment: String,
    },
}

impl Default for State {
    fn default() -> Self {
        Self::Start
    }
}

#[derive(BotCommand)]
#[command(rename = "lowercase", description = "–î–æ–ø—É—Å—Ç–∏–º—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –±–æ—Ç–∞:")]
pub enum Command {
    #[command(description = "–ü–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")]
    Start,
    #[command(description = "–î–æ–¥–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—Ä–æ –Ω–æ–≤—ñ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è")]
    Add,
    #[command(description = "–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤")]
    Reset,
}
#[tokio::main]
async fn main() {
    teloxide::enable_logging!();
    log::info!("Starting dialogue_bot...");

    let bot = Bot::from_env().auto_send();
    // You can also choose serializer::JSON or serializer::CBOR
    // All serializers but JSON require enabling feature
    // "serializer-<name>", e. g. "serializer-cbor"
    // or "serializer-bincode"
    let storage = RedisStorage::open("redis://127.0.0.1:6379", Json)
        .await
        .unwrap();

    let handler = Update::filter_message()
        .enter_dialogue::<Message, RedisStorage<Json>, State>()
        .dispatch_by::<State>();

    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![storage])
        .build()
        .setup_ctrlc_handler()
        .dispatch()
        .await;
}

fn request_phone_number_confirmation_keyboard() -> teloxide::types::KeyboardMarkup {
    teloxide::types::KeyboardMarkup::new(vec![vec![teloxide::types::KeyboardButton::new(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    )
    .request(teloxide::types::ButtonRequest::Contact)]])
}

async fn handle_start(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
) -> anyhow::Result<()> {
    log::info!("start: {:#?}", msg);
    if !msg.chat.is_private() {
        return Ok(());
    }
    match msg.contact() {
        Some(contact) => {
            if contact.user_id.map(i64::from) != Some(msg.chat.id) {
                bot.send_message(msg.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
                    .reply_markup(request_phone_number_confirmation_keyboard())
                    .await?;
                return Ok(());
            }
            if !contact.phone_number.starts_with("380") {
                bot.send_message(msg.chat.id, "–ù–∞–∂–∞–ª—å –º–∏ –º–æ–∂–µ–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ª–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.").reply_markup(request_phone_number_confirmation_keyboard()).await?;
                return Ok(());
            }
            dialogue
                .update(State::ReadyToReceiveMedia {
                    contact: contact.clone(),
                })
                .await?;
            bot.send_message(
                msg.chat.id,
                format!("–í–∞—à –Ω–æ–º–µ—Ä {} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä—ñ –∑–∞–∑–Ω–∞—á—Ç–µ —Ä–∞–π–æ–Ω (–Ω–µ —Ç—Ä–µ–±–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É!)", contact.phone_number),
            ).reply_markup(teloxide::types::KeyboardRemove::new())
            .await?;
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\" —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
            )
            .reply_markup(request_phone_number_confirmation_keyboard())
            .await?;
        }
    }

    Ok(())
}

async fn handle_ready_to_receive_media(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
    (contact,): (teloxide::types::Contact,),
    me: Me,
) -> anyhow::Result<()> {
    if let Some(text_msg) = msg.text() {
        let bot_name = me.user.username.unwrap();

        match Command::parse(text_msg, bot_name) {
            Ok(Command::Start) => {
                bot.send_message(msg.chat.id, HELP_TEXT).await?;
                return Ok(());
            }
            Ok(Command::Add | Command::Reset) => {
                bot.send_message(
                    msg.chat.id,
                    "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
                )
                .await?;
                return Ok(());
            }
            Err(_) => {}
        }
    }
    log::info!("ready_to_receive_media: {:?}: {:#?}", contact, msg);

    /*
    if let Some(last_post) = last_post {
        if chrono::Utc::now().signed_duration_since(last_post) < chrono::Duration::minutes(1) {
            bot.send_message(msg.chat.id, "–ù–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç—ñ—à–µ –Ω—ñ—à —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!").reply_to_message_id(msg.id).await?;
            return Ok(());
        }
    }
    */

    match msg.kind {
        teloxide::types::MessageKind::Common(teloxide::types::MessageCommon {
            media_kind:
                teloxide::types::MediaKind::Video(teloxide::types::MediaVideo { .. })
                | teloxide::types::MediaKind::Photo(teloxide::types::MediaPhoto { .. }),
            ..
        }) => {
            dialogue
                .update(State::ReadyToReceiveComment {
                    contact: contact.clone(),
                    media_msg_ids: vec![msg.id],
                })
                .await?;

            bot.send_message(msg.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–µ–º –∑ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è–º —Ä–∞–π–æ–Ω—É (–Ω–µ —Ç—Ä–µ–±–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É!)")
                .reply_to_message_id(msg.id)
                .await?;
        }
        _ => {
            bot.send_message(msg.chat.id, "–í—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–º –ª–∏—à–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ.")
                .reply_to_message_id(msg.id)
                .await?;
        }
    }
    Ok(())
}

async fn handle_ready_to_receive_comment(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
    (contact, mut media_msg_ids): (teloxide::types::Contact, Vec<i32>),
    me: Me,
) -> anyhow::Result<()> {
    if let Some(text_msg) = msg.text() {
        let bot_name = me.user.username.unwrap();

        match Command::parse(text_msg, bot_name) {
            Ok(Command::Start) => {
                bot.send_message(msg.chat.id, HELP_TEXT).await?;
                return Ok(());
            }
            Ok(Command::Add) => {
                bot.send_message(
                    msg.chat.id,
                    "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
                )
                .await?;
                return Ok(());
            }
            Ok(Command::Reset) => {
                bot.send_message(
                    msg.chat.id,
                    "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
                )
                .await?;
                dialogue
                    .update(State::ReadyToReceiveMedia { contact })
                    .await?;
                return Ok(());
            }
            Err(_) => {}
        }
    }
    log::info!("read_to_receive_comment: {:?}: {:#?}", contact, msg);

    /*
    if let Some(last_post) = last_post {
        if chrono::Utc::now().signed_duration_since(last_post) < chrono::Duration::minutes(1) {
            bot.send_message(msg.chat.id, "–ù–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç—ñ—à–µ –Ω—ñ—à —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!").reply_to_message_id(msg.id).await?;
            return Ok(());
        }
    }
    */

    match msg.kind {
        teloxide::types::MessageKind::Common(teloxide::types::MessageCommon {
            media_kind: teloxide::types::MediaKind::Video(_) | teloxide::types::MediaKind::Photo(_),
            ..
        }) => {
            media_msg_ids.push(msg.id);
            dialogue
                .update(State::ReadyToReceiveComment {
                    contact: contact.clone(),
                    media_msg_ids,
                })
                .await?;

            bot.send_message(msg.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–µ–º –∑ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è–º —Ä–∞–π–æ–Ω—É (–Ω–µ —Ç—Ä–µ–±–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É!)")
                .reply_to_message_id(msg.id)
                .await?;
        }
        teloxide::types::MessageKind::Common(teloxide::types::MessageCommon {
            media_kind: teloxide::types::MediaKind::Text(teloxide::types::MediaText { text, .. }),
            ..
        }) => {
            dialogue
                .update(State::AwaitingConfirmation {
                    contact: contact.clone(),
                    media_msg_ids,
                    comment: text,
                })
                .await?;

            bot.send_message(
                msg.chat.id,
                "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–¥–∞–Ω—ñ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ —Ç–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É?",
            )
            .reply_to_message_id(msg.id)
            .reply_markup(teloxide::types::KeyboardMarkup::new(vec![vec![
                teloxide::types::KeyboardButton::new("–¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–æ—ó —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"),
                teloxide::types::KeyboardButton::new("–ù—ñ, –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤"),
            ]]))
            .await?;
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "–í—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–º –ª–∏—à–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
            )
            .reply_to_message_id(msg.id)
            .await?;
        }
    }
    Ok(())
}

async fn handle_awaiting_confirmation(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
    (contact, media_msg_ids, comment): (teloxide::types::Contact, Vec<i32>, String),
    me: Me,
) -> anyhow::Result<()> {
    if let Some(text_msg) = msg.text() {
        let bot_name = me.user.username.unwrap();

        match Command::parse(text_msg, bot_name) {
            Ok(Command::Start) => {
                bot.send_message(msg.chat.id, HELP_TEXT).await?;
                return Ok(());
            }
            Ok(Command::Add) => {
                bot.send_message(
                    msg.chat.id,
                    "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
                )
                .await?;
                return Ok(());
            }
            Ok(Command::Reset) => {
                bot.send_message(
                    msg.chat.id,
                    "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
                )
                .await?;
                dialogue
                    .update(State::ReadyToReceiveMedia { contact })
                    .await?;
                return Ok(());
            }
            Err(_) => {}
        }
    }
    log::info!("awaiting_for_confirmation: {:?}: {:#?}", contact, msg);

    /*
    if let Some(last_post) = last_post {
        if chrono::Utc::now().signed_duration_since(last_post) < chrono::Duration::minutes(1) {
            bot.send_message(msg.chat.id, "–ù–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç—ñ—à–µ –Ω—ñ—à —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!").reply_to_message_id(msg.id).await?;
            return Ok(());
        }
    }
    */

    match msg.text() {
        Some("–¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–æ—ó —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É") => {
            bot.send_message(
                FORWARD_REPORTS_TO_CHAT_ID,
                format!("Reported by {:?}:\n{}", contact, comment),
            )
            .await?;
            for media_msg_id in media_msg_ids {
                bot.forward_message(FORWARD_REPORTS_TO_CHAT_ID, msg.chat.id, media_msg_id)
                    .await?;
            }

            dialogue
                .update(State::ReadyToReceiveMedia { contact })
                .await?;

            bot.send_message(
                msg.chat.id,
                "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é! –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! –©–æ–± –¥–æ–¥–∞—Ç–∏ —â–µ, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ /add",
            )
            .reply_to_message_id(msg.id)
            .reply_markup(teloxide::types::KeyboardRemove::new())
            .await?;
        }

        Some("–ù—ñ, –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤") => {
            dialogue
                .update(State::ReadyToReceiveMedia { contact })
                .await?;
            bot.send_message(
                msg.chat.id,
                "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§.",
            )
            .reply_to_message_id(msg.id)
            .reply_markup(teloxide::types::KeyboardRemove::new())
            .await?;
        }

        _ => {
            bot.send_message(
                msg.chat.id,
                "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ \"–¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–æ—ó —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É\" —á–∏ \"–ù—ñ, –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤\"",
            )
            .reply_to_message_id(msg.id)
            .await?;
        }
    }

    Ok(())
}
