use teloxide::{
    dispatching2::dialogue::{serializer::Json, RedisStorage, Storage},
    macros::DialogueState,
    payloads::{SendContact, SendMessageSetters},
    prelude2::*,
    types::{Contact, Me},
    utils::command::BotCommand,
    RequestError,
};
use thiserror::Error;

type MyDialogue = Dialogue<State, RedisStorage<Json>>;
type StorageError = <RedisStorage<Json> as Storage<State>>::Error;

const FORWARD_REPORTS_TO_CHAT_ID: i64 = -1001648966128;

const HELP_TEXT: &'static str = r#"–ú–∏—Ä—É –Ω–∞–º –≤—Å—ñ–º!

–¶–µ–π –±–æ—Ç –∑–±–∏—Ä–∞—î –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –Ω–∞—Å–ª—ñ–¥–∫—ñ–≤ –∞–≥—Ä–µ—Å—ñ—ó –†–§.

–ù–∞—Ä–∞–∑—ñ –±–æ—Ç –º–∞—î –ª–∏—à–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É:
/add - –î–æ–¥–∞—Ç–∏ –¥–æ–∫–∞–∑–∏ (–≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó) üì∑"#;

#[derive(Debug, Error)]
enum Error {
    #[error("error from Telegram: {0}")]
    TelegramError(#[from] RequestError),

    #[error("error from storage: {0}")]
    StorageError(#[from] StorageError),
}

#[derive(DialogueState, Debug, Clone, serde::Serialize, serde::Deserialize)]
#[handler_out(anyhow::Result<()>)]
pub enum State {
    #[handler(handle_start)]
    Start,

    #[handler(handle_verified)]
    Verified {
        contact: teloxide::types::Contact,
        last_post: Option<chrono::DateTime<chrono::Utc>>,
    },
}

impl Default for State {
    fn default() -> Self {
        Self::Start
    }
}

#[derive(BotCommand)]
#[command(rename = "lowercase", description = "–î–æ–ø—É—Å—Ç–∏–º—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –±–æ—Ç–∞:")]
pub enum Command {
    #[command(description = "–ü–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")]
    Start,
    #[command(description = "–î–æ–¥–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—Ä–æ –Ω–æ–≤—ñ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è")]
    Add,
}
#[tokio::main]
async fn main() {
    teloxide::enable_logging!();
    log::info!("Starting dialogue_bot...");

    let bot = Bot::from_env().auto_send();
    // You can also choose serializer::JSON or serializer::CBOR
    // All serializers but JSON require enabling feature
    // "serializer-<name>", e. g. "serializer-cbor"
    // or "serializer-bincode"
    let storage = RedisStorage::open("redis://127.0.0.1:6379", Json)
        .await
        .unwrap();

    let handler = Update::filter_message()
        .enter_dialogue::<Message, RedisStorage<Json>, State>()
        .dispatch_by::<State>();

    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![storage])
        .build()
        .setup_ctrlc_handler()
        .dispatch()
        .await;
}

fn request_phone_number_confirmation_keyboard() -> teloxide::types::KeyboardMarkup {
    teloxide::types::KeyboardMarkup::new(vec![vec![teloxide::types::KeyboardButton::new(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    )
    .request(teloxide::types::ButtonRequest::Contact)]])
}

async fn handle_start(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
) -> anyhow::Result<()> {
    println!("{:#?}", msg);
    if !msg.chat.is_private() {
        return Ok(());
    }
    match msg.contact() {
        Some(contact) => {
            if contact.user_id.map(|user_id| i64::from(user_id)) != Some(msg.chat.id) {
                bot.send_message(msg.chat.id, "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
                    .reply_markup(request_phone_number_confirmation_keyboard())
                    .await?;
                return Ok(());
            }
            if !contact.phone_number.starts_with("380") {
                bot.send_message(msg.chat.id, "–ù–∞–∂–∞–ª—å –º–∏ –º–æ–∂–µ–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ª–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.").reply_markup(request_phone_number_confirmation_keyboard()).await?;
                return Ok(());
            }
            dialogue
                .update(State::Verified {
                    contact: contact.clone(),
                    last_post: None,
                })
                .await?;
            bot.send_message(
                msg.chat.id,
                format!("–í–∞—à –Ω–æ–º–µ—Ä {} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä—ñ –∑–∞–∑–Ω–∞—á—Ç–µ —Ä–∞–π–æ–Ω (–Ω–µ —Ç—Ä–µ–±–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É!)", contact.phone_number),
            ).reply_markup(teloxide::types::KeyboardRemove::new())
            .await?;
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\" —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
            )
            .reply_markup(request_phone_number_confirmation_keyboard())
            .await?;
        }
    }

    Ok(())
}

async fn handle_verified(
    bot: AutoSend<Bot>,
    msg: Message,
    dialogue: MyDialogue,
    (contact, last_post): (
        teloxide::types::Contact,
        Option<chrono::DateTime<chrono::Utc>>,
    ),
    me: Me,
) -> anyhow::Result<()> {
    if let Some(text_msg) = msg.text() {
        let bot_name = me.user.username.unwrap();

        match Command::parse(text_msg, bot_name) {
            Ok(Command::Start) => {
                bot.send_message(msg.chat.id, HELP_TEXT).await?;
                return Ok(());
            }
            Ok(Command::Add) => {
                bot.send_message(msg.chat.id, "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä—É–π–Ω—É–≤–∞–Ω–Ω—å –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –∞–≥—Ä–µ—Å—ñ—ó –†–§. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä—ñ –∑–∞–∑–Ω–∞—á—Ç–µ —Ä–∞–π–æ–Ω (–Ω–µ —Ç—Ä–µ–±–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É!)").await?;
                return Ok(());
            }
            Err(_) => {}
        }
    }
    println!("{:?}: {:#?}", contact, msg);

    /*
    if let Some(last_post) = last_post {
        if chrono::Utc::now().signed_duration_since(last_post) < chrono::Duration::minutes(1) {
            bot.send_message(msg.chat.id, "–ù–µ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç—ñ—à–µ –Ω—ñ—à —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!").reply_to_message_id(msg.id).await?;
            return Ok(());
        }
    }
    */

    let forwarded_msg = bot
        .forward_message(FORWARD_REPORTS_TO_CHAT_ID, msg.chat.id, msg.id)
        .await?;
    bot.send_message(
        FORWARD_REPORTS_TO_CHAT_ID,
        format!("Reported by {:?}", contact),
    )
    .reply_to_message_id(forwarded_msg.id)
    .await?;
    dialogue
        .update(State::Verified {
            contact,
            last_post: Some(chrono::Utc::now()),
        })
        .await?;
    bot.send_message(msg.chat.id, "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é! –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! –©–æ–± –¥–æ–¥–∞—Ç–∏ —â–µ, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ /add")
        .reply_to_message_id(msg.id)
        .await?;

    Ok(())
}
